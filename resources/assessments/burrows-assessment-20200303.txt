See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 13 warnings)

Correctness:  68/68 tests passed
Memory:       8/10 tests passed
Timing:       134/159 tests passed

Aggregate score: 94.86%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.2K Mar  4 13:51 BurrowsWheeler.java
5.0K Mar  4 13:51 CircularSuffixArray.java
3.2K Mar  4 13:51 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 CircularSuffixArray.java
*-----------------------------------------------------------

% javac11 BurrowsWheeler.java
*-----------------------------------------------------------

% javac11 MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:19: The private instance (or static) variable 'N' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:21: The private instance (or static) variable 'alphabet' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:22: The private instance (or static) variable 'R' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:23: The private instance (or static) variable 'charOccurrences' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:55:9: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:58:9: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:75:67: The parameter variable 'R' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] BurrowsWheeler.java:84:9: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:103:55: The parameter variable 'R' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] BurrowsWheeler.java:112:61: The parameter variable 'N' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] CircularSuffixArray.java:19:15: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] CircularSuffixArray.java:22:15: The instance variable 'R' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] CircularSuffixArray.java:65:106: ')' is preceded with whitespace. [ParenPad]
[WARN] CircularSuffixArray.java:89:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] MoveToFront.java:25:9: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] MoveToFront.java:59:9: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 12 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:10:1: There is no need to define nested classes in this program. [Design]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "PGHMPNXSWVCSZNJCRBAXVMMJYOEESZ"
  * string = "BBABAABBABABAAABBAABBAAABAABBA"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: db d0 7c c3 ab 2e ac a2 6c c2 ef 72 fa 21 54 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 15/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 3a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 3b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 4a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 4b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 5b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 5c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 6b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 6d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 7a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 7b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 8a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 8c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 7b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 8a: check transform() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 8c: check that inverseTransform(transform()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 28/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> FAILED       16         2816
=> FAILED       32         2880
=> passed       64         3008
=> passed      128         3264
=> passed      256         3776
=> passed      512         4800
=> passed     1024         6848
=> passed     2048        10944
=> passed     4096        19136
=> passed     8192        35520
==> 8/10 tests passed

Total: 8/10 tests passed!

Estimated student memory (bytes) = 4.00 n + 2752.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.04       0.00     169.07
=> passed     2000       0.04       0.00      89.11
=> FAILED     4000       0.15       0.00     270.10
=> FAILED     8000       0.42       0.00     352.56
=> FAILED    16000       1.84       0.00     852.69
=> FAILED    32000       9.43       0.00    2321.37
=> FAILED    64000      39.23       0.01    6615.34
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time (using last 6 measurements)
    = 7.71e-09 * n^2.01  (R^2 = 1.00)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00     147.93
=> passed     2000       0.04       0.00     270.04
=> FAILED     4000       0.11       0.00     369.57
=> FAILED     8000       0.58       0.00    1239.64
=> FAILED    16000       2.31       0.00    4218.16
=> FAILED    32000       9.50       0.00   10479.20
=> FAILED    64000      39.07       0.00   21403.56
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time (using last 6 measurements)
    = 5.43e-09 * n^2.05  (R^2 = 1.00)


Total: 4/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.10
=> passed     2000       0.00       0.00       1.61
=> passed     4000       0.01       0.00       1.63
=> passed     8000       0.01       0.01       1.64
=> passed    16000       0.02       0.01       1.65
=> passed    32000       0.04       0.03       1.66
=> passed    64000       0.08       0.05       1.66
=> passed   128000       0.16       0.10       1.66
=> passed   256000       0.33       0.19       1.68

Estimated running time (using last 6 measurements)
     = 1.49e-06 * n^0.99  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.70
=> passed     2000       0.00       0.00       1.69
=> passed     4000       0.00       0.00       1.69
=> passed     8000       0.01       0.01       1.69
=> passed    16000       0.02       0.01       1.67
=> passed    32000       0.04       0.02       1.68
=> passed    64000       0.08       0.05       1.68
=> passed   128000       0.15       0.09       1.68
=> passed   256000       0.31       0.18       1.68

Estimated running time (using last 6 measurements)
     = 1.22e-06 * n^1.00  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.90
=> passed     2000       0.00       0.00       0.91
=> passed     4000       0.00       0.00       0.90
=> passed     8000       0.01       0.01       0.90
=> passed    16000       0.01       0.01       0.90
=> passed    32000       0.02       0.02       0.90
=> passed    64000       0.04       0.05       0.90
=> passed   128000       0.09       0.10       0.90
=> passed   256000       0.17       0.19       0.91

Estimated running time (using last 6 measurements)
     = 7.59e-07 * n^0.99  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.92
=> passed     2000       0.00       0.00       0.92
=> passed     4000       0.00       0.00       0.92
=> passed     8000       0.01       0.01       0.92
=> passed    16000       0.01       0.01       0.92
=> passed    32000       0.02       0.02       0.92
=> passed    64000       0.04       0.05       0.92
=> passed   128000       0.08       0.09       0.92
=> passed   256000       0.17       0.18       0.95

Estimated running time (using last 6 measurements)
     = 6.15e-07 * n^1.01  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.15
=> passed     2000       0.00       0.00       0.71
=> passed     4000       0.00       0.00       0.72
=> passed     8000       0.00       0.00       0.93
=> passed    16000       0.00       0.00       1.05
=> passed    32000       0.01       0.01       0.85
=> passed    64000       0.01       0.01       0.96
=> passed   128000       0.02       0.02       1.15
=> passed   256000       0.04       0.03       1.33
=> passed   512000       0.07       0.06       1.31
=> passed  1024000       0.16       0.12       1.32
=> passed  2048000       0.35       0.26       1.32
=> passed  4096000       0.77       0.58       1.33

Estimated running time as a function of n (using last 6 measurements)
    = 5.38e-08 * n^1.08  (R^2 = 1.00)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.45
=> passed     2000       0.00       0.00       1.52
=> passed     4000       0.00       0.00       1.46
=> passed     8000       0.00       0.00       1.39
=> passed    16000       0.00       0.00       1.38
=> passed    32000       0.00       0.00       1.37
=> passed    64000       0.01       0.01       1.38
=> passed   128000       0.02       0.01       1.36
=> passed   256000       0.04       0.03       1.35
=> passed   512000       0.08       0.06       1.33
=> passed  1024000       0.18       0.14       1.30
=> passed  2048000       0.40       0.30       1.32
=> passed  4096000       0.84       0.63       1.34

Estimated running time as a function of n (using last 6 measurements)
    = 4.27e-08 * n^1.10  (R^2 = 1.00)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.31
=> passed     2000       0.00       0.00       1.27
=> passed     4000       0.00       0.00       1.29
=> passed     8000       0.00       0.00       1.30
=> passed    16000       0.00       0.00       1.29
=> passed    32000       0.00       0.00       2.00
=> passed    64000       0.00       0.00       1.98
=> passed   128000       0.01       0.00       1.97
=> passed   256000       0.01       0.01       1.88
=> passed   512000       0.02       0.01       2.00
=> passed  1024000       0.04       0.02       2.00
=> passed  2048000       0.08       0.04       2.01
=> passed  4096000       0.16       0.08       1.99

Estimated running time as a function of n (using last 6 measurements)
    = 3.93e-08 * n^1.00  (R^2 = 1.00)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.06
=> passed     2000       0.00       0.00       1.00
=> passed     4000       0.00       0.00       1.04
=> passed     8000       0.00       0.00       1.04
=> passed    16000       0.00       0.00       1.03
=> passed    32000       0.00       0.00       1.20
=> passed    64000       0.00       0.00       1.22
=> passed   128000       0.01       0.00       1.71
=> passed   256000       0.02       0.01       2.67
=> passed   512000       0.03       0.01       2.28
=> passed  1024000       0.07       0.03       2.17
=> passed  2048000       0.14       0.07       2.13
=> passed  4096000       0.32       0.15       2.06

Estimated running time as a function of n (using last 6 measurements)
    = 2.10e-08 * n^1.08  (R^2 = 1.00)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       2.50
=> passed     2048       0.00       0.00       2.66
=> passed     4096       0.00       0.00       2.68
=> passed     8192       0.00       0.00       2.91
=> passed    16384       0.00       0.00       2.85
=> passed    32768       0.00       0.00       2.93
=> passed    65536       0.00       0.00       2.95
=> passed   131072       0.01       0.00       2.95
=> passed   262144       0.02       0.01       2.64
=> passed   524288       0.03       0.02       2.16
=> passed  1048576       0.07       0.03       2.10
=> passed  2097152       0.15       0.07       2.07
=> passed  4194304       0.35       0.16       2.15

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 1.33e-08 * n^1.12  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.17
=> passed     2000       0.00       0.00       2.44
=> passed     4000       0.00       0.00       2.39
=> passed     8000       0.00       0.00       2.24
=> passed    16000       0.00       0.00       2.31
=> passed    32000       0.00       0.00       2.39
=> passed    64000       0.00       0.00       2.40
=> passed   128000       0.01       0.00       2.39
=> passed   256000       0.01       0.00       2.35
=> passed   512000       0.02       0.01       2.38
=> passed  1024000       0.04       0.02       2.39
=> passed  2048000       0.09       0.04       2.37
=> passed  4096000       0.17       0.07       2.37

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 4.48e-08 * n^1.00  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       3.80
=> passed     2048       0.00       0.00       3.38
=> passed     4096       0.00       0.00       3.01
=> passed     8192       0.00       0.00       2.96
=> passed    16384       0.00       0.00       3.04
=> passed    32768       0.00       0.00       3.04
=> passed    65536       0.00       0.00       3.02
=> passed   131072       0.01       0.00       3.06
=> passed   262144       0.02       0.01       2.51
=> passed   524288       0.04       0.02       2.02
=> passed  1048576       0.08       0.04       2.02
=> passed  2097152       0.15       0.08       2.01
=> passed  4194304       0.33       0.17       1.98

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 2.46e-08 * n^1.08  (R^2 = 1.00)


Total: 92/95 tests passed!


================================================================




