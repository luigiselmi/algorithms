See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 2 warnings)

Correctness:  36/41 tests passed
Memory:       1/1 tests passed
Timing:       36/41 tests passed

Aggregate score: 90.24%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.8K Jul 29 14:09 BruteCollinearPoints.java
7.4K Jul 29 14:09 FastCollinearPoints.java
4.5K Jul 29 14:09 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
H C RpC_REPEATED_CONDITIONAL_TEST RpC: Contains a conditional test that is performed twice, one right after the other.  At Point.java:[line 54]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At BruteCollinearPoints.java:[line 73]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At BruteCollinearPoints.java:[line 32]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At FastCollinearPoints.java:[line 27]
M C FCCD_FIND_CLASS_CIRCULAR_DEPENDENCY FCCD: Class Point has a circular dependency with other classes  At Point.java:[lines 5-134]


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:14: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
BruteCollinearPoints.java:73: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
FastCollinearPoints.java:11: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:57:26: The local (or parameter) variable 'points' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] FastCollinearPoints.java:101:40: The local (or parameter) variable 'points' has the same name as an instance variable. Use a different name. [HiddenField]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 6 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 2
          collinear.segments()

    - failed on trial 1 of 100

  * equidistant.txt

    java.lang.NullPointerException

    BruteCollinearPoints.segments(BruteCollinearPoints.java:53)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:474)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:532)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:548)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:769)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          collinear.segments()

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
    - number of entries in student   solution: 26
    - number of entries in reference solution: 31
    - 5 missing entries in student solution, including:
      '(26000, 13000) -> (26000, 16000) -> (26000, 22000) -> (26000, 23000)'


  * filename = input300.txt
  * filename = inarow.txt
==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
    - number of entries in student   solution: 20
    - number of entries in reference solution: 42
    - 22 missing entries in student solution, including:
      '(2, 6) -> (3, 6) -> (6, 6) -> (9, 6)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - number of entries in student   solution: 30
    - number of entries in reference solution: 122
    - 92 missing entries in student solution, including:
      '(8, 6) -> (6, 7) -> (4, 8) -> (2, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - number of entries in student   solution: 91
    - number of entries in reference solution: 209
    - 118 missing entries in student solution, including:
      '(5, 42) -> (9, 42) -> (18, 42) -> (31, 42) -> (32, 42) -> (42, 42)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 5
    - number of entries in reference solution: 10
    - 5 missing entries in student solution, including:
      '(3, 0) -> (3, 1) -> (3, 2) -> (3, 3)'


  * 5-by-5 grid
    - number of entries in student   solution: 8
    - number of entries in reference solution: 16
    - 8 missing entries in student solution, including:
      '(0, 1) -> (1, 2) -> (2, 3) -> (3, 4)'


  * 10-by-10 grid
    - number of entries in student   solution: 35
    - number of entries in reference solution: 154
    - 119 missing entries in student solution, including:
      '(9, 6) -> (7, 7) -> (5, 8) -> (3, 9)'


  * 20-by-20 grid
    - number of entries in student   solution: 149
    - number of entries in reference solution: 2446
    - 2297 missing entries in student solution, including:
      '(19, 16) -> (17, 17) -> (15, 18) -> (13, 19)'


  * 5-by-4 grid
    - number of entries in student   solution: 6
    - number of entries in reference solution: 13
    - 7 missing entries in student solution, including:
      '(4, 0) -> (4, 1) -> (4, 2) -> (4, 3)'


  * 6-by-4 grid
    - number of entries in student   solution: 7
    - number of entries in reference solution: 16
    - 9 missing entries in student solution, including:
      '(5, 0) -> (5, 1) -> (5, 2) -> (5, 3)'


  * 10-by-4 grid
    - number of entries in student   solution: 11
    - number of entries in reference solution: 38
    - 27 missing entries in student solution, including:
      '(9, 0) -> (9, 1) -> (9, 2) -> (9, 3)'


  * 15-by-4 grid
    - number of entries in student   solution: 16
    - number of entries in reference solution: 79
    - 63 missing entries in student solution, including:
      '(14, 0) -> (14, 1) -> (14, 2) -> (14, 3)'


  * 25-by-4 grid
    - number of entries in student   solution: 26
    - number of entries in reference solution: 213
    - 187 missing entries in student solution, including:
      '(24, 0) -> (24, 1) -> (24, 2) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt

    java.lang.NullPointerException

    FastCollinearPoints.segments(FastCollinearPoints.java:48)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:539)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:595)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:610)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:843)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.segments()
    - failed on trial 1 of 100

  * equidistant.txt

    java.lang.NullPointerException

    FastCollinearPoints.segments(FastCollinearPoints.java:48)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:539)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:595)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:611)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:843)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 0
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 0
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 0
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        1120           0           1120                  120         
=> passed    32   0.00        9920           0           9920                  496         
=> passed    64   0.00       83328           0          83328                 2016         
=> passed   128   0.01      682752           0         682752                 8128         
=> passed   256   0.03     5527040           0        5527040                32640         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        1268           0           1268                  142         
=> passed    32   0.00       10368           0          10368                  541         
=> passed    64   0.00       85272           0          85272                 2100         
=> passed   128   0.01      691040           0         691040                 8299         
=> passed   256   0.03     5560714           0        5560714                32989         
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        7812       18649          45110                 2016         
=> passed   128   0.01       32004       92016         216036                 8128         
=> passed   256   0.02      129540      436287        1002114                32640         
=> passed   512   0.15      521220     2010162        4541544               130816         
=> passed  1024   0.25     2091012     9107604       20306220               523776         
=> passed  2048   0.86     8376324    40653500       89683324              2096128         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (89683324 / 20306220) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        7812        3906          15624                21712         
=> passed   128   0.00       32004       16002          64008               103616         
=> FAILED   256   0.01      129540       64770         259080               472449   (1.2x)
=> FAILED   512   0.09      521220      260610        1042440              2162221   (1.5x)
=> FAILED  1024   0.30     2091012     1045506        4182024              9684428   (1.7x)
=> FAILED  2048   0.65     8376324     4188162       16752648             43039944   (2.0x)
=> FAILED  4096   2.91    33529860    16764930       67059720            188923708   (2.2x)
==> 2/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67059720 / 16752648) = 2.00
=> passed

==> 3/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        1152       18525          38202                 3686         
=> passed   128   0.00        2428       90147         182722                13534         
=> passed   256   0.01        4622      420965         846552                50546         
=> passed   512   0.04       10112     1908529        3827170               195475         
=> passed  1024   0.18       20352     8481644       16983640               760061         
=> passed  2048   0.76       40832    37265226       74571284              2996563         
=> passed  4096   3.27       81788   162349415      324780618             11891639         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (324780618 / 74571284) = 2.12
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        1294       18518          38330                 3616         
=> passed   128   0.00        2692       91856         186404                12966         
=> passed   256   0.01        5508      434795         875098                49074         
=> passed   512   0.04       11150     1986367        3983884               191224         
=> passed  1024   0.19       22416     8918064       17858544               750926         
=> passed  2048   0.82       44938    39469835       78984608              2968682         
=> passed  4096   3.90       89998   172928771      345947540             11817919         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (345947540 / 78984608) = 2.13
=> passed

==> 8/8 tests passed

Total: 26/31 tests passed!


================================================================



